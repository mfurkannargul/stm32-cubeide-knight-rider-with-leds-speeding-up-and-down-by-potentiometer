
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002930  08002930  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002930  08002930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002938  08002938  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  0800294c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  0800294c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004dec  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001170  00000000  00000000  00024e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000528  00000000  00000000  00025f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  000264c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae73  00000000  00000000  00026940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fa3  00000000  00000000  000417b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000990e2  00000000  00000000  00046756  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001338  00000000  00000000  000df8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080028c0 	.word	0x080028c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080028c0 	.word	0x080028c0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800052e:	f000 fafb 	bl	8000b28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000532:	f000 f91b 	bl	800076c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000536:	f000 f9b7 	bl	80008a8 <MX_GPIO_Init>
	MX_ADC1_Init();
 800053a:	f000 f977 	bl	800082c <MX_ADC1_Init>
		uint16_t analogRead;
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 800053e:	4888      	ldr	r0, [pc, #544]	; (8000760 <main+0x238>)
 8000540:	f000 fc4e 	bl	8000de0 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8000544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000548:	4885      	ldr	r0, [pc, #532]	; (8000760 <main+0x238>)
 800054a:	f000 fcf7 	bl	8000f3c <HAL_ADC_PollForConversion>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <main+0x36>
			analogRead = HAL_ADC_GetValue(&hadc1);
 8000554:	4882      	ldr	r0, [pc, #520]	; (8000760 <main+0x238>)
 8000556:	f000 fdeb 	bl	8001130 <HAL_ADC_GetValue>
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
			} if (analogRead > 4000) {
				analogRead == 4000;
			}
		}

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2101      	movs	r1, #1
 8000562:	4880      	ldr	r0, [pc, #512]	; (8000764 <main+0x23c>)
 8000564:	f001 f9b2 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4a7f      	ldr	r2, [pc, #508]	; (8000768 <main+0x240>)
 800056c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fb3b 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	487a      	ldr	r0, [pc, #488]	; (8000764 <main+0x23c>)
 800057c:	f001 f9a6 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2102      	movs	r1, #2
 8000584:	4877      	ldr	r0, [pc, #476]	; (8000764 <main+0x23c>)
 8000586:	f001 f9a1 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	4a76      	ldr	r2, [pc, #472]	; (8000768 <main+0x240>)
 800058e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fb2a 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2102      	movs	r1, #2
 800059c:	4871      	ldr	r0, [pc, #452]	; (8000764 <main+0x23c>)
 800059e:	f001 f995 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2104      	movs	r1, #4
 80005a6:	486f      	ldr	r0, [pc, #444]	; (8000764 <main+0x23c>)
 80005a8:	f001 f990 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	4a6e      	ldr	r2, [pc, #440]	; (8000768 <main+0x240>)
 80005b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fb19 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2104      	movs	r1, #4
 80005be:	4869      	ldr	r0, [pc, #420]	; (8000764 <main+0x23c>)
 80005c0:	f001 f984 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2108      	movs	r1, #8
 80005c8:	4866      	ldr	r0, [pc, #408]	; (8000764 <main+0x23c>)
 80005ca:	f001 f97f 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4a65      	ldr	r2, [pc, #404]	; (8000768 <main+0x240>)
 80005d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fb08 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	4860      	ldr	r0, [pc, #384]	; (8000764 <main+0x23c>)
 80005e2:	f001 f973 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	485e      	ldr	r0, [pc, #376]	; (8000764 <main+0x23c>)
 80005ec:	f001 f96e 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	4a5d      	ldr	r2, [pc, #372]	; (8000768 <main+0x240>)
 80005f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 faf7 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4858      	ldr	r0, [pc, #352]	; (8000764 <main+0x23c>)
 8000604:	f001 f962 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2120      	movs	r1, #32
 800060c:	4855      	ldr	r0, [pc, #340]	; (8000764 <main+0x23c>)
 800060e:	f001 f95d 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4a54      	ldr	r2, [pc, #336]	; (8000768 <main+0x240>)
 8000616:	fb92 f3f3 	sdiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fae6 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	484f      	ldr	r0, [pc, #316]	; (8000764 <main+0x23c>)
 8000626:	f001 f951 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	484d      	ldr	r0, [pc, #308]	; (8000764 <main+0x23c>)
 8000630:	f001 f94c 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	4a4c      	ldr	r2, [pc, #304]	; (8000768 <main+0x240>)
 8000638:	fb92 f3f3 	sdiv	r3, r2, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fad5 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	4847      	ldr	r0, [pc, #284]	; (8000764 <main+0x23c>)
 8000648:	f001 f940 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	4844      	ldr	r0, [pc, #272]	; (8000764 <main+0x23c>)
 8000652:	f001 f93b 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4a43      	ldr	r2, [pc, #268]	; (8000768 <main+0x240>)
 800065a:	fb92 f3f3 	sdiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fac4 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	483e      	ldr	r0, [pc, #248]	; (8000764 <main+0x23c>)
 800066a:	f001 f92f 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	483c      	ldr	r0, [pc, #240]	; (8000764 <main+0x23c>)
 8000674:	f001 f92a 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4a3b      	ldr	r2, [pc, #236]	; (8000768 <main+0x240>)
 800067c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fab3 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	; 0x40
 800068a:	4836      	ldr	r0, [pc, #216]	; (8000764 <main+0x23c>)
 800068c:	f001 f91e 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2120      	movs	r1, #32
 8000694:	4833      	ldr	r0, [pc, #204]	; (8000764 <main+0x23c>)
 8000696:	f001 f919 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <main+0x240>)
 800069e:	fb92 f3f3 	sdiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 faa2 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <main+0x23c>)
 80006ae:	f001 f90d 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	482b      	ldr	r0, [pc, #172]	; (8000764 <main+0x23c>)
 80006b8:	f001 f908 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <main+0x240>)
 80006c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fa91 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2110      	movs	r1, #16
 80006ce:	4825      	ldr	r0, [pc, #148]	; (8000764 <main+0x23c>)
 80006d0:	f001 f8fc 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
 80006d8:	4822      	ldr	r0, [pc, #136]	; (8000764 <main+0x23c>)
 80006da:	f001 f8f7 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <main+0x240>)
 80006e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa80 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <main+0x23c>)
 80006f2:	f001 f8eb 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2104      	movs	r1, #4
 80006fa:	481a      	ldr	r0, [pc, #104]	; (8000764 <main+0x23c>)
 80006fc:	f001 f8e6 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <main+0x240>)
 8000704:	fb92 f3f3 	sdiv	r3, r2, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fa6f 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2104      	movs	r1, #4
 8000712:	4814      	ldr	r0, [pc, #80]	; (8000764 <main+0x23c>)
 8000714:	f001 f8da 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2102      	movs	r1, #2
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <main+0x23c>)
 800071e:	f001 f8d5 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <main+0x240>)
 8000726:	fb92 f3f3 	sdiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa5e 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <main+0x23c>)
 8000736:	f001 f8c9 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2101      	movs	r1, #1
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <main+0x23c>)
 8000740:	f001 f8c4 	bl	80018cc <HAL_GPIO_WritePin>
		HAL_Delay(400000/analogRead);
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <main+0x240>)
 8000748:	fb92 f3f3 	sdiv	r3, r2, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fa4d 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <main+0x23c>)
 8000758:	f001 f8b8 	bl	80018cc <HAL_GPIO_WritePin>
	{
 800075c:	e6ef      	b.n	800053e <main+0x16>
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028
 8000764:	40011400 	.word	0x40011400
 8000768:	00061a80 	.word	0x00061a80

0800076c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	; 0x70
 8000770:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000776:	2238      	movs	r2, #56	; 0x38
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f898 	bl	80028b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f88a 	bl	80028b0 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007b0:	2300      	movs	r3, #0
 80007b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80007b4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80007b8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f89a 	bl	80018fc <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80007ce:	f000 f8a9 	bl	8000924 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007da:	2390      	movs	r3, #144	; 0x90
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fb9a 	bl	8001f28 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x92>
	{
		Error_Handler();
 80007fa:	f000 f893 	bl	8000924 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fe:	2302      	movs	r3, #2
 8000800:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000806:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fd96 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000816:	f000 f885 	bl	8000924 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800081a:	4b03      	ldr	r3, [pc, #12]	; (8000828 <SystemClock_Config+0xbc>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	3770      	adds	r7, #112	; 0x70
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	42420070 	.word	0x42420070

0800082c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_ADC1_Init+0x74>)
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <MX_ADC1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_ADC1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_ADC1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_ADC1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_ADC1_Init+0x74>)
 8000856:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800085a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_ADC1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_ADC1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_ADC1_Init+0x74>)
 800086a:	f000 f9e1 	bl	8000c30 <HAL_ADC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000874:	f000 f856 	bl	8000924 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000878:	230a      	movs	r3, #10
 800087a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800087c:	2301      	movs	r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0x74>)
 800088a:	f000 fc5d 	bl	8001148 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000894:	f000 f846 	bl	8000924 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000028 	.word	0x20000028
 80008a4:	40012400 	.word	0x40012400

080008a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_GPIO_Init+0x74>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_GPIO_Init+0x74>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_GPIO_Init+0x74>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_GPIO_Init+0x74>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <MX_GPIO_Init+0x74>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_GPIO_Init+0x74>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ec:	2200      	movs	r2, #0
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x78>)
 80008f2:	f000 ffeb 	bl	80018cc <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008f6:	23ff      	movs	r3, #255	; 0xff
 80008f8:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0x78>)
 800090e:	f000 fe83 	bl	8001618 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	40011400 	.word	0x40011400

08000924 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_MspInit+0x5c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <HAL_MspInit+0x5c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_MspInit+0x5c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x5c>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x5c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x5c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_MspInit+0x60>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_MspInit+0x60>)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000
 8000990:	40010000 	.word	0x40010000

08000994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_ADC_MspInit+0x6c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d121      	bne.n	80009f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_ADC_MspInit+0x70>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e4:	2301      	movs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_ADC_MspInit+0x74>)
 80009f4:	f000 fe10 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40012400 	.word	0x40012400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40011000 	.word	0x40011000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <HardFault_Handler+0x4>

08000a1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8ac 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <SystemInit+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <SystemInit+0x70>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <SystemInit+0x70>)
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <SystemInit+0x70>)
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <SystemInit+0x74>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <SystemInit+0x70>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <SystemInit+0x70>)
 8000a82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <SystemInit+0x70>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <SystemInit+0x70>)
 8000a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <SystemInit+0x70>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <SystemInit+0x70>)
 8000a9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000aa2:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <SystemInit+0x70>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <SystemInit+0x70>)
 8000aaa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <SystemInit+0x70>)
 8000ab2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000ab6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SystemInit+0x70>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x78>)
 8000ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac4:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	f0ff0000 	.word	0xf0ff0000
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000adc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ade:	e003      	b.n	8000ae8 <LoopCopyDataInit>

08000ae0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ae2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ae4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ae6:	3104      	adds	r1, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af0:	d3f6      	bcc.n	8000ae0 <CopyDataInit>
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000af4:	e002      	b.n	8000afc <LoopFillZerobss>

08000af6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000af8:	f842 3b04 	str.w	r3, [r2], #4

08000afc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b00:	d3f9      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff ffad 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 feaf 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fd0d 	bl	8000528 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b10:	08002940 	.word	0x08002940
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b1c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b20:	2000005c 	.word	0x2000005c

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 fd39 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fef4 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fd43 	bl	80015fe <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 fd19 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000058 	.word	0x20000058

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000058 	.word	0x20000058

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_Delay+0x40>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e0be      	b.n	8000dd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d109      	bne.n	8000c74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fe90 	bl	8000994 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fbb1 	bl	80013dc <ADC_ConversionStop_Disable>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8099 	bne.w	8000dbe <HAL_ADC_Init+0x18e>
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8095 	bne.w	8000dbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c9c:	f023 0302 	bic.w	r3, r3, #2
 8000ca0:	f043 0202 	orr.w	r2, r3, #2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b1b      	ldrb	r3, [r3, #12]
 8000cb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc8:	d003      	beq.n	8000cd2 <HAL_ADC_Init+0xa2>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d102      	bne.n	8000cd8 <HAL_ADC_Init+0xa8>
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	e000      	b.n	8000cda <HAL_ADC_Init+0xaa>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7d1b      	ldrb	r3, [r3, #20]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d119      	bne.n	8000d1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b1b      	ldrb	r3, [r3, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	035a      	lsls	r2, r3, #13
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e00b      	b.n	8000d1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f043 0220 	orr.w	r2, r3, #32
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	f043 0201 	orr.w	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_ADC_Init+0x1a8>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4c:	d003      	beq.n	8000d56 <HAL_ADC_Init+0x126>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d104      	bne.n	8000d60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	051b      	lsls	r3, r3, #20
 8000d5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_ADC_Init+0x1ac>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d10b      	bne.n	8000d9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f023 0303 	bic.w	r3, r3, #3
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d9a:	e018      	b.n	8000dce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f023 0312 	bic.w	r3, r3, #18
 8000da4:	f043 0210 	orr.w	r2, r3, #16
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dbc:	e007      	b.n	8000dce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f043 0210 	orr.w	r2, r3, #16
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000ddc:	ff1f0efe 	.word	0xff1f0efe

08000de0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_Start+0x1a>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e098      	b.n	8000f2c <HAL_ADC_Start+0x14c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fa98 	bl	8001338 <ADC_Enable>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8087 	bne.w	8000f22 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a41      	ldr	r2, [pc, #260]	; (8000f34 <HAL_ADC_Start+0x154>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d105      	bne.n	8000e3e <HAL_ADC_Start+0x5e>
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <HAL_ADC_Start+0x158>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d115      	bne.n	8000e6a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d026      	beq.n	8000ea6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e68:	e01d      	b.n	8000ea6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <HAL_ADC_Start+0x158>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d004      	beq.n	8000e8a <HAL_ADC_Start+0xaa>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <HAL_ADC_Start+0x154>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10d      	bne.n	8000ea6 <HAL_ADC_Start+0xc6>
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_ADC_Start+0x158>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	f023 0206 	bic.w	r2, r3, #6
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ebe:	e002      	b.n	8000ec6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f06f 0202 	mvn.w	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ee2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ee6:	d113      	bne.n	8000f10 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_ADC_Start+0x154>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d105      	bne.n	8000efe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_ADC_Start+0x158>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d108      	bne.n	8000f10 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	e00c      	b.n	8000f2a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	e003      	b.n	8000f2a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40012800 	.word	0x40012800
 8000f38:	40012400 	.word	0x40012400

08000f3c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f52:	f7ff fe41 	bl	8000bd8 <HAL_GetTick>
 8000f56:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	f043 0220 	orr.w	r2, r3, #32
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0c8      	b.n	8001110 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d12a      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d123      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f9a:	e01a      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa2:	d016      	beq.n	8000fd2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_ADC_PollForConversion+0x7e>
 8000faa:	f7ff fe15 	bl	8000bd8 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d20b      	bcs.n	8000fd2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0204 	orr.w	r2, r3, #4
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e09e      	b.n	8001110 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0dd      	beq.n	8000f9c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe0:	e06c      	b.n	80010bc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <HAL_ADC_PollForConversion+0x1dc>)
 8000fe4:	681c      	ldr	r4, [r3, #0]
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f001 fada 	bl	80025a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fec:	4603      	mov	r3, r0
 8000fee:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6919      	ldr	r1, [r3, #16]
 8000ff8:	4b48      	ldr	r3, [pc, #288]	; (800111c <HAL_ADC_PollForConversion+0x1e0>)
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d118      	bne.n	8001032 <HAL_ADC_PollForConversion+0xf6>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68d9      	ldr	r1, [r3, #12]
 8001006:	4b46      	ldr	r3, [pc, #280]	; (8001120 <HAL_ADC_PollForConversion+0x1e4>)
 8001008:	400b      	ands	r3, r1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d111      	bne.n	8001032 <HAL_ADC_PollForConversion+0xf6>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	4b43      	ldr	r3, [pc, #268]	; (8001124 <HAL_ADC_PollForConversion+0x1e8>)
 8001016:	400b      	ands	r3, r1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d108      	bne.n	800102e <HAL_ADC_PollForConversion+0xf2>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68d9      	ldr	r1, [r3, #12]
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <HAL_ADC_PollForConversion+0x1ec>)
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_ADC_PollForConversion+0xf2>
 800102a:	2314      	movs	r3, #20
 800102c:	e020      	b.n	8001070 <HAL_ADC_PollForConversion+0x134>
 800102e:	2329      	movs	r3, #41	; 0x29
 8001030:	e01e      	b.n	8001070 <HAL_ADC_PollForConversion+0x134>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6919      	ldr	r1, [r3, #16]
 8001038:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <HAL_ADC_PollForConversion+0x1e8>)
 800103a:	400b      	ands	r3, r1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <HAL_ADC_PollForConversion+0x112>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68d9      	ldr	r1, [r3, #12]
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_ADC_PollForConversion+0x1ec>)
 8001048:	400b      	ands	r3, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <HAL_ADC_PollForConversion+0x12e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6919      	ldr	r1, [r3, #16]
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_ADC_PollForConversion+0x1f0>)
 8001056:	400b      	ands	r3, r1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d108      	bne.n	800106e <HAL_ADC_PollForConversion+0x132>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68d9      	ldr	r1, [r3, #12]
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_ADC_PollForConversion+0x1f0>)
 8001064:	400b      	ands	r3, r1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_PollForConversion+0x132>
 800106a:	2354      	movs	r3, #84	; 0x54
 800106c:	e000      	b.n	8001070 <HAL_ADC_PollForConversion+0x134>
 800106e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001076:	e01d      	b.n	80010b4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107e:	d016      	beq.n	80010ae <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <HAL_ADC_PollForConversion+0x15a>
 8001086:	f7ff fda7 	bl	8000bd8 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d20b      	bcs.n	80010ae <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f043 0204 	orr.w	r2, r3, #4
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e030      	b.n	8001110 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8dd      	bhi.n	8001078 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f06f 0212 	mvn.w	r2, #18
 80010c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010e0:	d115      	bne.n	800110e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d111      	bne.n	800110e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	24924924 	.word	0x24924924
 8001120:	00924924 	.word	0x00924924
 8001124:	12492492 	.word	0x12492492
 8001128:	00492492 	.word	0x00492492
 800112c:	00249249 	.word	0x00249249

08001130 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x20>
 8001164:	2302      	movs	r3, #2
 8001166:	e0dc      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1da>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b06      	cmp	r3, #6
 8001176:	d81c      	bhi.n	80011b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b05      	subs	r3, #5
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4019      	ands	r1, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b05      	subs	r3, #5
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
 80011b0:	e03c      	b.n	800122c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d81c      	bhi.n	80011f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b23      	subs	r3, #35	; 0x23
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4019      	ands	r1, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b23      	subs	r3, #35	; 0x23
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
 80011f2:	e01b      	b.n	800122c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b41      	subs	r3, #65	; 0x41
 8001206:	221f      	movs	r2, #31
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b41      	subs	r3, #65	; 0x41
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d91c      	bls.n	800126e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3b1e      	subs	r3, #30
 8001246:	2207      	movs	r2, #7
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	4019      	ands	r1, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	3b1e      	subs	r3, #30
 8001260:	fa00 f203 	lsl.w	r2, r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	e019      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6919      	ldr	r1, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	2207      	movs	r2, #7
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ae:	2b11      	cmp	r3, #17
 80012b0:	d132      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_ADC_ConfigChannel+0x1e4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d125      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d126      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d11a      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_ADC_ConfigChannel+0x1e8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_ADC_ConfigChannel+0x1ec>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9a      	lsrs	r2, r3, #18
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f8:	e002      	b.n	8001300 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x1b2>
 8001306:	e007      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	f043 0220 	orr.w	r2, r3, #32
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40012400 	.word	0x40012400
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	d039      	beq.n	80013ca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <ADC_Enable+0x9c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <ADC_Enable+0xa0>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001374:	e002      	b.n	800137c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001382:	f7ff fc29 	bl	8000bd8 <HAL_GetTick>
 8001386:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001388:	e018      	b.n	80013bc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800138a:	f7ff fc25 	bl	8000bd8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d911      	bls.n	80013bc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f043 0210 	orr.w	r2, r3, #16
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	f043 0201 	orr.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e007      	b.n	80013cc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d1df      	bne.n	800138a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d127      	bne.n	8001446 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001406:	f7ff fbe7 	bl	8000bd8 <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800140c:	e014      	b.n	8001438 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800140e:	f7ff fbe3 	bl	8000bd8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d90d      	bls.n	8001438 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e007      	b.n	8001448 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d0e3      	beq.n	800140e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff90 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff49 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5e 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff90 	bl	8001508 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5f 	bl	80014b4 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb0 	bl	800156c <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e127      	b.n	800187c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800162c:	2201      	movs	r2, #1
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8116 	bne.w	8001876 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b12      	cmp	r3, #18
 8001650:	d034      	beq.n	80016bc <HAL_GPIO_Init+0xa4>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d80d      	bhi.n	8001672 <HAL_GPIO_Init+0x5a>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x9a>
 800165a:	2b02      	cmp	r3, #2
 800165c:	d804      	bhi.n	8001668 <HAL_GPIO_Init+0x50>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d031      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001662:	2b01      	cmp	r3, #1
 8001664:	d01c      	beq.n	80016a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e048      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001668:	2b03      	cmp	r3, #3
 800166a:	d043      	beq.n	80016f4 <HAL_GPIO_Init+0xdc>
 800166c:	2b11      	cmp	r3, #17
 800166e:	d01b      	beq.n	80016a8 <HAL_GPIO_Init+0x90>
          break;
 8001670:	e043      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001672:	4a89      	ldr	r2, [pc, #548]	; (8001898 <HAL_GPIO_Init+0x280>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d026      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001678:	4a87      	ldr	r2, [pc, #540]	; (8001898 <HAL_GPIO_Init+0x280>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d806      	bhi.n	800168c <HAL_GPIO_Init+0x74>
 800167e:	4a87      	ldr	r2, [pc, #540]	; (800189c <HAL_GPIO_Init+0x284>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d020      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001684:	4a86      	ldr	r2, [pc, #536]	; (80018a0 <HAL_GPIO_Init+0x288>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
          break;
 800168a:	e036      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800168c:	4a85      	ldr	r2, [pc, #532]	; (80018a4 <HAL_GPIO_Init+0x28c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001692:	4a85      	ldr	r2, [pc, #532]	; (80018a8 <HAL_GPIO_Init+0x290>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d016      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001698:	4a84      	ldr	r2, [pc, #528]	; (80018ac <HAL_GPIO_Init+0x294>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
          break;
 800169e:	e02c      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e028      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e023      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	3308      	adds	r3, #8
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e01e      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	330c      	adds	r3, #12
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e019      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ce:	2304      	movs	r3, #4
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e012      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	611a      	str	r2, [r3, #16]
          break;
 80016e6:	e008      	b.n	80016fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
          break;
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d801      	bhi.n	8001704 <HAL_GPIO_Init+0xec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	e001      	b.n	8001708 <HAL_GPIO_Init+0xf0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2bff      	cmp	r3, #255	; 0xff
 800170e:	d802      	bhi.n	8001716 <HAL_GPIO_Init+0xfe>
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x104>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3b08      	subs	r3, #8
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	210f      	movs	r1, #15
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	6a39      	ldr	r1, [r7, #32]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	431a      	orrs	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8096 	beq.w	8001876 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_GPIO_Init+0x298>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x298>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x298>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001762:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x2a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x19e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x2a4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x19a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a49      	ldr	r2, [pc, #292]	; (80018c0 <HAL_GPIO_Init+0x2a8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x196>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a48      	ldr	r2, [pc, #288]	; (80018c4 <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x192>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017b6:	2300      	movs	r3, #0
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c8:	493a      	ldr	r1, [pc, #232]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4938      	ldr	r1, [pc, #224]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4933      	ldr	r1, [pc, #204]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4929      	ldr	r1, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001822:	4013      	ands	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4924      	ldr	r1, [pc, #144]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	491f      	ldr	r1, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800184a:	4013      	ands	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	491a      	ldr	r1, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	4915      	ldr	r1, [pc, #84]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001872:	4013      	ands	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	f47f aed0 	bne.w	800162c <HAL_GPIO_Init+0x14>
  }
}
 800188c:	bf00      	nop
 800188e:	372c      	adds	r7, #44	; 0x2c
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	10210000 	.word	0x10210000
 800189c:	10110000 	.word	0x10110000
 80018a0:	10120000 	.word	0x10120000
 80018a4:	10310000 	.word	0x10310000
 80018a8:	10320000 	.word	0x10320000
 80018ac:	10220000 	.word	0x10220000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40011400 	.word	0x40011400
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e304      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8087 	beq.w	8001a2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800191c:	4b92      	ldr	r3, [pc, #584]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b04      	cmp	r3, #4
 8001926:	d00c      	beq.n	8001942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001928:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d112      	bne.n	800195a <HAL_RCC_OscConfig+0x5e>
 8001934:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d10b      	bne.n	800195a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d06c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x12c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d168      	bne.n	8001a28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e2de      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x76>
 8001964:	4b80      	ldr	r3, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a7f      	ldr	r2, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e02e      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x98>
 800197a:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0xbc>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a71      	ldr	r2, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 80019b8:	4b6b      	ldr	r3, [pc, #428]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a6a      	ldr	r2, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a67      	ldr	r2, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8fe 	bl	8000bd8 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f8fa 	bl	8000bd8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e292      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe4>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff f8ea 	bl	8000bd8 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff f8e6 	bl	8000bd8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e27e      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x10c>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d063      	beq.n	8001afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d11c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x18c>
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x176>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e252      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4939      	ldr	r1, [pc, #228]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	e03a      	b.n	8001afe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_RCC_OscConfig+0x270>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff f89f 	bl	8000bd8 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f89b 	bl	8000bd8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e233      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_OscConfig+0x270>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f87e 	bl	8000bd8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f87a 	bl	8000bd8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e212      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d03a      	beq.n	8001b80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d019      	beq.n	8001b46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_RCC_OscConfig+0x274>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f85e 	bl	8000bd8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff f85a 	bl	8000bd8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1f2      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 fbde 	bl	8002300 <RCC_Delay>
 8001b44:	e01c      	b.n	8001b80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_OscConfig+0x274>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f844 	bl	8000bd8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b52:	e00f      	b.n	8001b74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff f840 	bl	8000bd8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d908      	bls.n	8001b74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1d8      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	42420000 	.word	0x42420000
 8001b70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b74:	4b9b      	ldr	r3, [pc, #620]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e9      	bne.n	8001b54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80a6 	beq.w	8001cda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b8b      	ldr	r3, [pc, #556]	; (8001de8 <HAL_RCC_OscConfig+0x4ec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b88      	ldr	r3, [pc, #544]	; (8001de8 <HAL_RCC_OscConfig+0x4ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a87      	ldr	r2, [pc, #540]	; (8001de8 <HAL_RCC_OscConfig+0x4ec>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f801 	bl	8000bd8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7fe fffd 	bl	8000bd8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e195      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b7e      	ldr	r3, [pc, #504]	; (8001de8 <HAL_RCC_OscConfig+0x4ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x312>
 8001c00:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e02d      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x334>
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a6f      	ldr	r2, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	e01c      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_OscConfig+0x356>
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6213      	str	r3, [r2, #32]
 8001c44:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a66      	ldr	r2, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	e00b      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a63      	ldr	r2, [pc, #396]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7fe ffb1 	bl	8000bd8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe ffad 	bl	8000bd8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e143      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ee      	beq.n	8001c7a <HAL_RCC_OscConfig+0x37e>
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe ff9b 	bl	8000bd8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe ff97 	bl	8000bd8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e12d      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d105      	bne.n	8001cda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 808c 	beq.w	8001dfc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d10e      	bne.n	8001d10 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e103      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d14e      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0ef      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_RCC_OscConfig+0x4f0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe ff4b 	bl	8000bd8 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d46:	f7fe ff47 	bl	8000bd8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0df      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	491c      	ldr	r1, [pc, #112]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x4f0>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe ff23 	bl	8000bd8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d96:	f7fe ff1f 	bl	8000bd8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0b7      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x49a>
 8001db4:	e022      	b.n	8001dfc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_OscConfig+0x4f0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff06 	bl	8000bd8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001dce:	e00f      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001dd0:	f7fe ff02 	bl	8000bd8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d908      	bls.n	8001df0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e09a      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
 8001dec:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e9      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8088 	beq.w	8001f16 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d068      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d14d      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <HAL_RCC_OscConfig+0x628>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe feda 	bl	8000bd8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fed6 	bl	8000bd8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e06e      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4e:	d10f      	bne.n	8001e70 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4931      	ldr	r1, [pc, #196]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f023 020f 	bic.w	r2, r3, #15
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	492d      	ldr	r1, [pc, #180]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	430b      	orrs	r3, r1
 8001e82:	4927      	ldr	r1, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x628>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fea3 	bl	8000bd8 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fe9f 	bl	8000bd8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e037      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x59a>
 8001eb4:	e02f      	b.n	8001f16 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x628>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fe8c 	bl	8000bd8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fe88 	bl	8000bd8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e020      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c8>
 8001ee2:	e018      	b.n	8001f16 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e013      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x624>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	42420060 	.word	0x42420060

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fdde 	bl	8000bd8 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fdda 	bl	8000bd8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4601      	mov	r1, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	fa21 f303 	lsr.w	r3, r1, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fd3c 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002918 	.word	0x08002918
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002100:	b091      	sub	sp, #68	; 0x44
 8002102:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8002106:	f107 0414 	add.w	r4, r7, #20
 800210a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210c:	c407      	stmia	r4!, {r0, r1, r2}
 800210e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002110:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002112:	1d3c      	adds	r4, r7, #4
 8002114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	2300      	movs	r3, #0
 8002124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x50>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x56>
 800214a:	e0a7      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002150:	e0a7      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800215e:	4413      	add	r3, r2
 8002160:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 808d 	beq.w	800228c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800217e:	4413      	add	r3, r2
 8002180:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002186:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06a      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	3301      	adds	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80021a0:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3302      	adds	r3, #2
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	f04f 0400 	mov.w	r4, #0
 80021bc:	fb03 f502 	mul.w	r5, r3, r2
 80021c0:	fb01 f004 	mul.w	r0, r1, r4
 80021c4:	4428      	add	r0, r5
 80021c6:	fba1 5603 	umull	r5, r6, r1, r3
 80021ca:	1983      	adds	r3, r0, r6
 80021cc:	461e      	mov	r6, r3
 80021ce:	4629      	mov	r1, r5
 80021d0:	4632      	mov	r2, r6
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0154      	lsls	r4, r2, #5
 80021dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e0:	014b      	lsls	r3, r1, #5
 80021e2:	4619      	mov	r1, r3
 80021e4:	4622      	mov	r2, r4
 80021e6:	1b49      	subs	r1, r1, r5
 80021e8:	eb62 0206 	sbc.w	r2, r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0194      	lsls	r4, r2, #6
 80021f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	1a5b      	subs	r3, r3, r1
 80021fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	00e2      	lsls	r2, r4, #3
 800220c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002210:	00d9      	lsls	r1, r3, #3
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	195b      	adds	r3, r3, r5
 8002218:	eb44 0406 	adc.w	r4, r4, r6
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	0262      	lsls	r2, r4, #9
 8002226:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800222a:	0259      	lsls	r1, r3, #9
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	4698      	mov	r8, r3
 8002232:	46a1      	mov	r9, r4
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	fb03 f502 	mul.w	r5, r3, r2
 8002246:	fb01 f004 	mul.w	r0, r1, r4
 800224a:	4428      	add	r0, r5
 800224c:	fba1 3403 	umull	r3, r4, r1, r3
 8002250:	1902      	adds	r2, r0, r4
 8002252:	4614      	mov	r4, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	4640      	mov	r0, r8
 800225a:	4649      	mov	r1, r9
 800225c:	f7fd ffe2 	bl	8000224 <__aeabi_uldivmod>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002266:	e007      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 800226c:	fb02 f203 	mul.w	r2, r2, r3
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002278:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800227c:	461a      	mov	r2, r3
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	4293      	cmp	r3, r2
 8002282:	d108      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8002284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228a:	e004      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3744      	adds	r7, #68	; 0x44
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ae:	bf00      	nop
 80022b0:	080028d8 	.word	0x080028d8
 80022b4:	080028e8 	.word	0x080028e8
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	003d0900 	.word	0x003d0900

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022dc:	f7ff fff2 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e0:	4601      	mov	r1, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08002928 	.word	0x08002928

08002300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <RCC_Delay+0x34>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <RCC_Delay+0x38>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800231c:	bf00      	nop
  }
  while (Delay --);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	60fa      	str	r2, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <RCC_Delay+0x1c>
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07d      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
 8002378:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002384:	2301      	movs	r3, #1
 8002386:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d118      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a7e      	ldr	r2, [pc, #504]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fc1a 	bl	8000bd8 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	e008      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe fc16 	bl	8000bd8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0e5      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c6:	4b72      	ldr	r3, [pc, #456]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02e      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d027      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023fa:	4a65      	ldr	r2, [pc, #404]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d014      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fbe5 	bl	8000bd8 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fbe1 	bl	8000bd8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ae      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002434:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4953      	ldr	r1, [pc, #332]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002442:	4313      	orrs	r3, r2
 8002444:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002446:	7efb      	ldrb	r3, [r7, #27]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002456:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4947      	ldr	r1, [pc, #284]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4940      	ldr	r1, [pc, #256]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002490:	4313      	orrs	r3, r2
 8002492:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4938      	ldr	r1, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d148      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d138      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d009      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e042      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4920      	ldr	r1, [pc, #128]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800250e:	4313      	orrs	r3, r2
 8002510:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	491c      	ldr	r1, [pc, #112]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002520:	4313      	orrs	r3, r2
 8002522:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe fb55 	bl	8000bd8 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002532:	f7fe fb51 	bl	8000bd8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	; 0x64
 800253e:	d901      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e020      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002550:	e009      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	42420440 	.word	0x42420440
 800259c:	42420070 	.word	0x42420070

080025a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b093      	sub	sp, #76	; 0x4c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80025a8:	4ba9      	ldr	r3, [pc, #676]	; (8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80025aa:	f107 0418 	add.w	r4, r7, #24
 80025ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b0:	c407      	stmia	r4!, {r0, r1, r2}
 80025b2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80025b4:	4ba7      	ldr	r3, [pc, #668]	; (8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80025b6:	f107 0408 	add.w	r4, r7, #8
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c4:	2300      	movs	r3, #0
 80025c6:	647b      	str	r3, [r7, #68]	; 0x44
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
 80025d0:	2300      	movs	r3, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
 80025dc:	2300      	movs	r3, #0
 80025de:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	f200 8124 	bhi.w	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	080027b1 	.word	0x080027b1
 80025f4:	08002817 	.word	0x08002817
 80025f8:	08002833 	.word	0x08002833
 80025fc:	0800270f 	.word	0x0800270f
 8002600:	08002833 	.word	0x08002833
 8002604:	08002833 	.word	0x08002833
 8002608:	08002833 	.word	0x08002833
 800260c:	08002761 	.word	0x08002761
 8002610:	08002833 	.word	0x08002833
 8002614:	08002833 	.word	0x08002833
 8002618:	08002833 	.word	0x08002833
 800261c:	08002833 	.word	0x08002833
 8002620:	08002833 	.word	0x08002833
 8002624:	08002833 	.word	0x08002833
 8002628:	08002833 	.word	0x08002833
 800262c:	08002631 	.word	0x08002631
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002630:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80f9 	beq.w	8002836 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002650:	4413      	add	r3, r2
 8002652:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03e      	beq.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002662:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800266e:	4413      	add	r3, r2
 8002670:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002676:	4b78      	ldr	r3, [pc, #480]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01c      	beq.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002682:	4b75      	ldr	r3, [pc, #468]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	3301      	adds	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002690:	4b71      	ldr	r3, [pc, #452]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3302      	adds	r3, #2
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026a8:	fb02 f203 	mul.w	r2, r2, r3
 80026ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ba:	e007      	b.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026bc:	4a67      	ldr	r2, [pc, #412]	; (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80026be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80026cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026d0:	461a      	mov	r2, r3
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
 80026de:	e004      	b.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d102      	bne.n	80026fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80026f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80026fc:	e09b      	b.n	8002836 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 80026fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800270c:	e093      	b.n	8002836 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800270e:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff fcef 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 800271e:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002720:	e08b      	b.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002722:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8085 	beq.w	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3301      	adds	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	0b1b      	lsrs	r3, r3, #12
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	3302      	adds	r3, #2
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800274c:	4a43      	ldr	r2, [pc, #268]	; (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800275e:	e06c      	b.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8002760:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 800276c:	f7ff fcc6 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8002770:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002772:	e064      	b.n	800283e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05e      	beq.n	800283e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800278e:	4b32      	ldr	r3, [pc, #200]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	0b1b      	lsrs	r3, r3, #12
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	3302      	adds	r3, #2
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800279c:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80027ae:	e046      	b.n	800283e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c0:	d108      	bne.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 80027cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
 80027d2:	e01f      	b.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027de:	d109      	bne.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80027ec:	f649 4340 	movw	r3, #40000	; 0x9c40
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
 80027f2:	e00f      	b.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027fe:	d120      	bne.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01a      	beq.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 800280c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002812:	e016      	b.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8002814:	e015      	b.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002816:	f7ff fd5f 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0b9b      	lsrs	r3, r3, #14
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002830:	e008      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8002832:	bf00      	nop
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002836:	bf00      	nop
 8002838:	e004      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800283a:	bf00      	nop
 800283c:	e002      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002842:	bf00      	nop
    }
  }
  return (frequency);
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002846:	4618      	mov	r0, r3
 8002848:	374c      	adds	r7, #76	; 0x4c
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	080028f8 	.word	0x080028f8
 8002854:	08002908 	.word	0x08002908
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	003d0900 	.word	0x003d0900
 8002864:	aaaaaaab 	.word	0xaaaaaaab

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	2500      	movs	r5, #0
 800286c:	4e0c      	ldr	r6, [pc, #48]	; (80028a0 <__libc_init_array+0x38>)
 800286e:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 8002870:	1ba4      	subs	r4, r4, r6
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	42a5      	cmp	r5, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	f000 f822 	bl	80028c0 <_init>
 800287c:	2500      	movs	r5, #0
 800287e:	4e0a      	ldr	r6, [pc, #40]	; (80028a8 <__libc_init_array+0x40>)
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <__libc_init_array+0x44>)
 8002882:	1ba4      	subs	r4, r4, r6
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	42a5      	cmp	r5, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002890:	4798      	blx	r3
 8002892:	3501      	adds	r5, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800289a:	4798      	blx	r3
 800289c:	3501      	adds	r5, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	08002938 	.word	0x08002938
 80028a4:	08002938 	.word	0x08002938
 80028a8:	08002938 	.word	0x08002938
 80028ac:	0800293c 	.word	0x0800293c

080028b0 <memset>:
 80028b0:	4603      	mov	r3, r0
 80028b2:	4402      	add	r2, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
